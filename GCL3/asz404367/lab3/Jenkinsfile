pipeline {
    agent any

    stages {
        
        stage('checkout remote repo'){
            steps{
            git( branch: 'asz404367',
                 url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2023.git')
            }
        }

        stage('Init stage') {
            steps {
               dir("GCL3/asz404367/lab3/sample_project/builder"){
                    sh "echo 'Building base image with Java8 and git'"
                    sh "docker build -t lab3_base ./base"
                    sh "echo 'Building builder image'"
                    sh "docker build -t builder_img ."
                    sh "echo 'Starting builder container'"
                    sh "docker run --rm -d --name builder builder_img"
               }
            }
        }

        stage('Build stage') {
            steps {
                sh '''
                    docker exec -t builder ./mvnw compile
                    rc=$?
                    if [ $rc -ne 0 ] ; then
                    echo Compile failed, exit code [$rc]; exit $rc
                    fi
                '''
            }
        }

        stage('Test stage') {
            steps {
                sh '''
                    docker exec -t builder ./mvnw test
                    rc=$?
                    if [ $rc -ne 0 ] ; then
                    echo Tests failed, exit code [$rc]; exit $rc
                    fi
                '''
            }
        }

        stage('Deploy stage') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub_token', variable: 'docker_hub_token')]) {
                sh '''
                    docker cp builder:target/spring-boot-rest-controller-unit-test-0.0.1-SNAPSHOT.jar app.jar
                    docker build -t sample_project_app .
                    docker login -u szafa9999 -p ${docker_hub_token}
                    docker push sample_project_app
                '''
            }
            }
        }


    }
//###############################
    post{
        always{
            sh 'docker stop builder'
            sh 'docker image rm builder_img'
        }
    }
}
